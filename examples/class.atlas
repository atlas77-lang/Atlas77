public class Int64 {
    public:
        value: int64;
        const MAX_INT64: int64 = 9223372036854775807;
        const MIN_INT64: int64 = -9223372036854775808;
    
    public:
        /// Constructor to initialize the value
        Int64(val: int64) {
            self.value = val;
        }
        
        /// Destructor
        ~Int64() {}
        
        /// Static function to create an Int64 with value 0
        func zero() -> Int64 {
            return new Int64(0);
        }
        func max() -> Int64 {
            return new Int64(Int64::MAX_INT64);
        }
        func min() -> Int64 {
            return new Int64(Int64::MIN_INT64);
        }
        
        /// Addition
        func add(self, val: Int64) -> Int64 {
            return new Int64(self.value + val.value);
        }
        operator +(self, val: Int64) -> Int64 {
            return self.add(val);
        }
        
        /// Subtraction
        func sub(self, val: Int64) -> Int64 {
            return new Int64(self.value - val.value);
        }
        operator -(self, val: Int64) -> Int64 {
            return self.sub(val);
        }
        
        /// Multiplication
        func mul(self, val: Int64) -> Int64 {
            return new Int64(self.value * val.value);
        }
        operator *(self, val: Int64) -> Int64 {
            return self.mul(val);
        }
        
        /// Division (Error handling for division by zero is done in the VM for now)
        func div(self, val: Int64) -> Int64 {
            return new Int64(self.value / val.value);
        }
        operator /(self, val: Int64) -> Int64 {
            return self.div(val);
        }
        
        /// Modulus (Error handling for division by zero is done in the VM for now)
        func mod(self, val: Int64) -> Int64 {
            return new Int64(self.value % val.value);
        }
        operator %(self, val: Int64) -> Int64 {
            return self.mod(val);
        }
        
        /// Equality
        func eq(self, val: Int64) -> bool {
            return self.value == val.value;
        }
        operator ==(self, val: Int64) -> bool {
            return self.eq(val);
        }
        
        /// Inequality
        func ne(self, val: Int64) -> bool {
            return self.value != val.value;
        }
        operator !=(self, val: Int64) -> bool {
            return self.ne(val);
        }
        
        /// Greater than
        func gt(self, val: Int64) -> bool {
            return self.value > val.value;
        }
        operator >(self, val: Int64) -> bool {
            return self.gt(val);
        }
        
        /// Greater than or equal to
        func ge(self, val: Int64) -> bool {
            return self.value >= val.value;
        }
        operator >=(self, val: Int64) -> bool {
            return self.ge(val);
        }
        
        /// Less than
        func lt(self, val: Int64) -> bool {
            return self.value < val.value;
        }
        operator <(self, val: Int64) -> bool {
            return self.lt(val);
        }
        
        /// Less than or equal to
        func le(self, val: Int64) -> bool {
            return self.value <= val.value;
        }
        operator <=(self, val: Int64) -> bool {
            return self.le(val);
        }
        
        /// Bitwise AND
        func and(self, val: Int64) -> Int64 {
            return new Int64(self.value & val.value);
        }
        operator &(self, val: Int64) -> Int64 {
            return self.and(val);
        }
        
        /// Bitwise OR
        func or(self, val: Int64) -> Int64 {
            return new Int64(self.value | val.value);
        }
        operator |(self, val: Int64) -> Int64 {
            return self.or(val);
        }
}