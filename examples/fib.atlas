import "std/io"

func main()  {
    let fib_20 = iterative_fib(10_u64);
    print_uint(fib_20);
}

func recursive_fib(n: u64) -> u64 {
    if n <= 1_u64 {
        return n;
    } else {
        return recursive_fib(n - 1_u64) + recursive_fib(n - 2_u64);
    }
}

func iterative_fib(n: u64) -> u64 {
    let a = 0_u64;
    let b = 1_u64;
    let i = 0_u64;
    while i < n {
        let temp = a;
        a = b;
        b = temp + b;
        i = i + 1_u64;
    }
    return a;
}

class SomeGeneric<T> {
    private:
        value: T;
    public:
        func new(value: T) -> SomeGeneric<T> {
            return SomeGeneric {
                value: value,
            };
        }
        func get(&self) -> T {
            return self.value;
        }
}

enum Option
where @T: Printable {
    Some(@T),
    None,
}
