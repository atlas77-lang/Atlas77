import "std/io"

public class Fibonacci {
    public:
        nth: int64;
    public:
        Fibonacci(number: int64) {
            self.nth = number;
        }
        func iterative_fib(self) -> int64 {
            let a = 0;
            let b = 1;
            let i = 0;
            while i < self.nth {
                let temp = a;
                a = b;
                b = temp + b;
                i = i + 1;
            }
            return a;
        }
        func recursive_fib(self, nth: int64) -> int64 {
            if nth <= 1 {
                return nth;
            } else {
                return self.recursive_fib(nth - 1) + self.recursive_fib(nth - 2);
            }
        }
}

func main()  {
    let fibonacci = new Fibonacci(5);
    let n = fibonacci.nth;
    let res_iterative = fibonacci.iterative_fib();
    print("Iterative Fib: ");
    println(res_iterative);
    let res_recursive = fibonacci.recursive_fib(fibonacci.nth);
    print("Recursive Fib: ");
    println(res_recursive);
}

func recursive_fib(n: int64) -> int64 {
    if n <= 1 {
        return n;
    } else {
        return recursive_fib(n - 1) + recursive_fib(n - 2);
    }
}

func iterative_fib(blabla: int64) -> int64 {
    let a = 0;
    let b = 1;
    let i = 0;
    while i < blabla {
        let temp = a;
        a = b;
        b = temp + b;
        i = i + 1;
    }
    return a;
}
