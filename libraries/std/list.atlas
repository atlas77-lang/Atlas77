//[T] is a statically sized list of element of type T.
//The list is 0-indexed.
//The list is immutable.
//

extern len<T>(l: [T]) -> u64;
extern get<T>(l: [T], i: u64) -> T;
extern set<T>(l: [T], i: u64, v: T) -> [T];
extern slice<T>(l: [T], start: u64, end: u64) -> [T];

public class Vec<T> {
    private:
        data: [T];
        len: u64;
        cap: u64;
    public:
        func create() -> Vec<T> {
            return new Vec<T> {
                //Create a new list of size 4 so you don't end up allocating memory for every push.
                data: new [T; 4],
                len: 4
            }
        }
        func len() -> u64 {
            return this.len;
        }
        //#[override(Index::get)]
        func get(i: u64) -> T {
            return this.data[i];
        }
        //#[override(Index::set)]
        func set(i: u64, v: T) {
            this.data[i] = v;
        }
        func push(v: T) {
            if this.len == this.cap {
                let old_data = clone(this.data);
                this.data = new [T; this.cap + 5];
                let i = 0;
                while i < this.cap {
                    this.data[i] = old_data[i];
                    i = i + 1;
                }
                this.cap = this.cap + 5;                                
            } else {
                this.data[this.len] = v;
                this.len = this.len + 1;
            }
        }
        func pop() -> T {
            this.len = this.len - 1;
            return this.data[this.len];
        }
}
