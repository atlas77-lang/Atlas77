public enum Flag {
    Read,
    Write,
}

public class File {
    private:
        flag: Flag;
        content: str;
    public:
        path: str;
    public:
        File(path: str, flag: Flag) {
            self.flag = flag;
            self.content = "";
            self.path = path;
        }
        // destructor
        ~File() { }
        func read(path: str) -> File {
            let file: Self = new File();
            file.path = path;
            file.content = Some(read_file(path));
            return file;
        }
        func open(self) {
            if self.flag == Flag.Read {
                self.content = read_file(self.path);
            }
        }
        func close(self) {
            if self.flag == Flag.Write {
                write_file(self.path, self.content);
            }
        }
        func write(self, content: str) {
            write_file(self.path, content);
        }
        func remove(self) {
            remove_file(self.path);
        }
        func exists(self) -> bool {
            return file_exists(self.path);
        }
        func read_dir(path: str) -> [str] {
            return read_dir(path);
        }
        func read_file(path: str) -> str {
            return read_file(path);
        }
}

extern read_dir(path: str) -> [str]
extern read_file(path: str) -> str
extern write_file(path: str, content: str)
extern remove_file(path: str)
extern file_exists(path: str) -> bool
