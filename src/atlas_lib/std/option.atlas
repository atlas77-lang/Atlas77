public struct Option<T> {
    private:
        data: T?;
    public:
        Option(data: T?) {
            self.data = data;
        }
        ~Option() {}
        func some(data: T) -> Option<T> {
            return new Option(data);
        }
        func none() -> Option<T> {
            return new Option(null);
        }
        func is_some(self) -> bool {
            return self.data != null;
        }
        func is_none(self) -> bool {
            return self.data == null;
        }
        func unwrap(self) -> T {
            if self.is_some() {
                return self.data;
            } else {
                panic("called `Option<T>::unwrap()` on a `None` value");
            }
        }
        func unwrap_or(self, def: T) -> T {
            if self.is_some() {
                return self.data;
            } else {
                return def;
            }
        }
        func expect(self, msg: str) -> T {
            if self.is_some() {
                return self.data;
            } else {
                panic(msg);
            }
        }
}