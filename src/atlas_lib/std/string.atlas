// Miscellaneous functions for raw strings
public extern str_len(s: str) -> uint64
public extern trim(s: str) -> str
public extern to_upper(s: str) -> str
public extern to_lower(s: str) -> str
public extern split(s: str, sep: str) -> [str]
public extern str_cmp(s1: str, s2: str) -> int64
public extern to_chars(s: str) -> [char]
public extern from_chars(s: [char]) -> str

public class String {
    private:
        //Because you can't index a `str` directly, we need to store the string as a list of characters
        s: [char];
    public:
        len: uint64;
    public:
        String(s: [char]) {
            self.s = s;
            self.len = len(s);
        }
        ~String() {
            //Ensure it is deleted from memory
            delete self.s;
        }
        func from_str(s: str) -> String {
            return new String(from_chars(s));
        }
        func get(self, i: uint64) -> char {
            return self.s[i];
        }
        func set(self, i: uint64, c: char) {
            self.s[i] = c;
        }
        func len(self) -> uint64 {
            return self.len;
        }
        func to_str(self) -> str {
            return from_chars(self.s);
        }
        func to_upper(self) -> String {
            return new String(to_upper(self.to_str()));
        }
        func to_lower(self) -> String {
            return new String(to_lower(self.to_str()));
        }
        func trim(self) {
            return new String(trim(self.to_str()));
        }
}

public class Char {
    public:
        value: char;
    public:
        Char(val: char) {
            self.value = val;
        }
        ~Char() {}
        func to_str(self) -> str {
            return self.value as str;
        }
        func from_str(s: str) -> Char {
            return new Char(to_chars(s)[0]);
        }
}
