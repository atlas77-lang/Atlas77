package std::vector;

// Import the base functions for [T]
import "std/list"

// This can be used as a Type to enforce the implementation of the Indexable<T> concept
// You can also use it as a Type to store a reference to an object that implements the Indexable<T> concept
public concept Indexable<T> 
where T: impl Copy {
    func len() -> uint64;
    func get(i: uint64) -> T;
    func set(i: uint64, v: T);
}

public class Vec<T> : impl Indexable<T> {
    // Every fields under this `private:` block is private
    private:
        data: [T];
        cap: uint64;
    // Every fields under this `public:` block is public
    public:
        len: uint64;
    // Every functions under this `public:` block is public
    public:
        // Constructor
        // There is only one constructor in atlas77
        // You don't need to specify the return type of the constructor nor `self`
        // It is called with the `new` keyword
        Vec(data: [T]) {
            self.data = data;
            self.len = len(data);
            self.cap = len(data);
        }
        // Destructor
        // There is only one destructor in atlas77
        // It is called with the `delete` keyword
        // It is also called automatically with the reference counting system
        // It can be used if you want a specific behavior when the object is deleted
        ~Vec() {}
        // Need to find a good syntax for operator overloading
        operator [](self, i: uint64) -> T {
            return self.data[i];
        }
        operator []=(self, i: uint64, v: T) {
            self.data[i] = v;
        }
        func with_capacity(cap: uint64) -> Vec<T> {
            let list = new [T; cap];
            return new Vec(list);
        }
        // This specify that the function is an override of the Indexable<T> concept
        #[override(Indexable<T>::len)]
        func len() -> uint64 {
            return self.len;
        }
        #[override(Indexable<T>::get)]
        func get(i: uint64) -> T {
            // We can use `operator []`
            return self[i];
        }
        #[override(Indexable<T>::set)]
        func set(i: uint64, v: T) {
            // We can use `operator []=`
            self[i] = v;
        }
        func push(self, v: T) {
            if self.len == self.cap {
                // Take the reference of the old data so it doesn't get dropped
                let old_data = self.data;
                // Allocate a new array with double the capacity
                self.data = new [T; self.cap * 2];
                let i = 0;
                //Need an operator for the copy of the array
                while i < self.cap {
                    self.data[i] = old_data[i];
                    i = i + 1;
                }
                self.cap *= 2;
            } else {
                self.data[self.len] = v;
                self.len += 1;
            }
        }
        // This should return T directly because what if self.len == 0?
        func pop() -> T {
            self.len -= 1;
            return self.data[self.len];
        }
}